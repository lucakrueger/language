// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length);
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1)
          + peg$padEnd("", last - s.column, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "@use ";
  var peg$c1 = "@";
  var peg$c2 = "(";
  var peg$c3 = ")";
  var peg$c4 = "@ :: ";
  var peg$c5 = "type";
  var peg$c6 = "::";
  var peg$c7 = "|";
  var peg$c8 = "?";
  var peg$c9 = "=";
  var peg$c10 = ",";
  var peg$c11 = ":";
  var peg$c12 = "{";
  var peg$c13 = "}";
  var peg$c14 = "[";
  var peg$c15 = "]";
  var peg$c16 = "!&";
  var peg$c17 = "!!";
  var peg$c18 = "\"";
  var peg$c19 = "+++";
  var peg$c20 = "++";
  var peg$c21 = "+";
  var peg$c22 = "***";
  var peg$c23 = "**";
  var peg$c24 = "*";
  var peg$c25 = "///";
  var peg$c26 = "//";
  var peg$c27 = "/";
  var peg$c28 = "%%%";
  var peg$c29 = "%%";
  var peg$c30 = "%";
  var peg$c31 = "&&&";
  var peg$c32 = "&&";
  var peg$c33 = "&";
  var peg$c34 = "###";
  var peg$c35 = "##";
  var peg$c36 = "#";
  var peg$c37 = "@@@";
  var peg$c38 = "@@";
  var peg$c39 = "$$$";
  var peg$c40 = "$$";
  var peg$c41 = "$";
  var peg$c42 = "\xA7\xA7\xA7";
  var peg$c43 = "\xA7\xA7";
  var peg$c44 = "\xA7";
  var peg$c45 = ":::";
  var peg$c46 = ";;;";
  var peg$c47 = ";;";
  var peg$c48 = ";";
  var peg$c49 = "^^^";
  var peg$c50 = "^^";
  var peg$c51 = "^";
  var peg$c52 = "\xB0\xB0\xB0";
  var peg$c53 = "\xB0\xB0";
  var peg$c54 = "\xB0";
  var peg$c55 = "???";
  var peg$c56 = "??";
  var peg$c57 = "<=";
  var peg$c58 = ">=";
  var peg$c59 = "<-";
  var peg$c60 = "->";
  var peg$c61 = "<<";
  var peg$c62 = ">>";
  var peg$c63 = "<";
  var peg$c64 = ">";
  var peg$c65 = "---";
  var peg$c66 = "--";
  var peg$c67 = "-";
  var peg$c68 = "|||";
  var peg$c69 = "||";
  var peg$c70 = "!!!";
  var peg$c71 = "!";
  var peg$c72 = "===";
  var peg$c73 = "==";
  var peg$c74 = "/=";
  var peg$c75 = "\u2248";
  var peg$c76 = "~~~";
  var peg$c77 = "~~";
  var peg$c78 = "~";
  var peg$c79 = "\xB1";
  var peg$c80 = "...";
  var peg$c81 = "..";
  var peg$c82 = ".";
  var peg$c83 = "'''";
  var peg$c84 = "''";
  var peg$c85 = "'";
  var peg$c86 = "\\";
  var peg$c87 = "b";
  var peg$c88 = "f";
  var peg$c89 = "n";
  var peg$c90 = "r";
  var peg$c91 = "t";
  var peg$c92 = "/*";
  var peg$c93 = "*/";

  var peg$r0 = /^[a-z]/;
  var peg$r1 = /^[A-Z]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[\/.'_]/;
  var peg$r4 = /^[ -!#-[\]-\u10FFFF]/;
  var peg$r5 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("@use ", false);
  var peg$e1 = peg$literalExpectation("@", false);
  var peg$e2 = peg$literalExpectation("(", false);
  var peg$e3 = peg$literalExpectation(")", false);
  var peg$e4 = peg$literalExpectation("@ :: ", false);
  var peg$e5 = peg$literalExpectation("type", false);
  var peg$e6 = peg$literalExpectation("::", false);
  var peg$e7 = peg$literalExpectation("|", false);
  var peg$e8 = peg$literalExpectation("?", false);
  var peg$e9 = peg$literalExpectation("=", false);
  var peg$e10 = peg$literalExpectation(",", false);
  var peg$e11 = peg$literalExpectation(":", false);
  var peg$e12 = peg$literalExpectation("{", false);
  var peg$e13 = peg$literalExpectation("}", false);
  var peg$e14 = peg$literalExpectation("[", false);
  var peg$e15 = peg$literalExpectation("]", false);
  var peg$e16 = peg$literalExpectation("!&", false);
  var peg$e17 = peg$literalExpectation("!!", false);
  var peg$e18 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e19 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e20 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e21 = peg$classExpectation(["/", ".", "'", "_"], false, false);
  var peg$e22 = peg$otherExpectation("string");
  var peg$e23 = peg$literalExpectation("\"", false);
  var peg$e24 = peg$literalExpectation("+++", false);
  var peg$e25 = peg$literalExpectation("++", false);
  var peg$e26 = peg$literalExpectation("+", false);
  var peg$e27 = peg$literalExpectation("***", false);
  var peg$e28 = peg$literalExpectation("**", false);
  var peg$e29 = peg$literalExpectation("*", false);
  var peg$e30 = peg$literalExpectation("///", false);
  var peg$e31 = peg$literalExpectation("//", false);
  var peg$e32 = peg$literalExpectation("/", false);
  var peg$e33 = peg$literalExpectation("%%%", false);
  var peg$e34 = peg$literalExpectation("%%", false);
  var peg$e35 = peg$literalExpectation("%", false);
  var peg$e36 = peg$literalExpectation("&&&", false);
  var peg$e37 = peg$literalExpectation("&&", false);
  var peg$e38 = peg$literalExpectation("&", false);
  var peg$e39 = peg$literalExpectation("###", false);
  var peg$e40 = peg$literalExpectation("##", false);
  var peg$e41 = peg$literalExpectation("#", false);
  var peg$e42 = peg$literalExpectation("@@@", false);
  var peg$e43 = peg$literalExpectation("@@", false);
  var peg$e44 = peg$literalExpectation("$$$", false);
  var peg$e45 = peg$literalExpectation("$$", false);
  var peg$e46 = peg$literalExpectation("$", false);
  var peg$e47 = peg$literalExpectation("\xA7\xA7\xA7", false);
  var peg$e48 = peg$literalExpectation("\xA7\xA7", false);
  var peg$e49 = peg$literalExpectation("\xA7", false);
  var peg$e50 = peg$literalExpectation(":::", false);
  var peg$e51 = peg$literalExpectation(";;;", false);
  var peg$e52 = peg$literalExpectation(";;", false);
  var peg$e53 = peg$literalExpectation(";", false);
  var peg$e54 = peg$literalExpectation("^^^", false);
  var peg$e55 = peg$literalExpectation("^^", false);
  var peg$e56 = peg$literalExpectation("^", false);
  var peg$e57 = peg$literalExpectation("\xB0\xB0\xB0", false);
  var peg$e58 = peg$literalExpectation("\xB0\xB0", false);
  var peg$e59 = peg$literalExpectation("\xB0", false);
  var peg$e60 = peg$literalExpectation("???", false);
  var peg$e61 = peg$literalExpectation("??", false);
  var peg$e62 = peg$literalExpectation("<=", false);
  var peg$e63 = peg$literalExpectation(">=", false);
  var peg$e64 = peg$literalExpectation("<-", false);
  var peg$e65 = peg$literalExpectation("->", false);
  var peg$e66 = peg$literalExpectation("<<", false);
  var peg$e67 = peg$literalExpectation(">>", false);
  var peg$e68 = peg$literalExpectation("<", false);
  var peg$e69 = peg$literalExpectation(">", false);
  var peg$e70 = peg$literalExpectation("---", false);
  var peg$e71 = peg$literalExpectation("--", false);
  var peg$e72 = peg$literalExpectation("-", false);
  var peg$e73 = peg$literalExpectation("|||", false);
  var peg$e74 = peg$literalExpectation("||", false);
  var peg$e75 = peg$literalExpectation("!!!", false);
  var peg$e76 = peg$literalExpectation("!", false);
  var peg$e77 = peg$literalExpectation("===", false);
  var peg$e78 = peg$literalExpectation("==", false);
  var peg$e79 = peg$literalExpectation("/=", false);
  var peg$e80 = peg$literalExpectation("\u2248", false);
  var peg$e81 = peg$literalExpectation("~~~", false);
  var peg$e82 = peg$literalExpectation("~~", false);
  var peg$e83 = peg$literalExpectation("~", false);
  var peg$e84 = peg$literalExpectation("\xB1", false);
  var peg$e85 = peg$literalExpectation("...", false);
  var peg$e86 = peg$literalExpectation("..", false);
  var peg$e87 = peg$literalExpectation(".", false);
  var peg$e88 = peg$literalExpectation("'''", false);
  var peg$e89 = peg$literalExpectation("''", false);
  var peg$e90 = peg$literalExpectation("'", false);
  var peg$e91 = peg$literalExpectation("\\", false);
  var peg$e92 = peg$literalExpectation("b", false);
  var peg$e93 = peg$literalExpectation("f", false);
  var peg$e94 = peg$literalExpectation("n", false);
  var peg$e95 = peg$literalExpectation("r", false);
  var peg$e96 = peg$literalExpectation("t", false);
  var peg$e97 = peg$classExpectation([[" ", "!"], ["#", "["], ["]", "\u10FF"], "F", "F"], false, false);
  var peg$e98 = peg$otherExpectation("number");
  var peg$e99 = peg$literalExpectation("/*", false);
  var peg$e100 = peg$literalExpectation("*/", false);
  var peg$e101 = peg$anyExpectation();
  var peg$e102 = peg$otherExpectation("whitespace");
  var peg$e103 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(branch) {
      	var ff = ""
          for(var elem of branch) {
          	//ff.push(elem[3])
              ff += elem[3]
          }
          
          var out = ""
          /*var newSets = []
          var c = 1
          for(var s of sets) {
          	/*if((c + 1) % 2 == 0) {
              	//newSets.push(s)
                  out += s + "\n"
              }*/
              //out += s + "\n"
              //c++
          //}*/*/
          
          for(var i = 0; i < funs.length; i++) {
          	out += "value_t " + funs[i] +"(value_t values[], unsigned int size);\n"
          }
          out += "\n"
          
          var setsout = ""
          for(var c = 0; c < sets.length; c++) {
          	if(c % 2 == 0) {
              	continue
              }
          	setsout += sets[c] + "\n"
              out += setsNames[c] + ";\n"
          }
          
          out += "\n" + setsout + "\n"
          
          for(var t of types) {
          	out += t + "\n"
          }
          
          out = out + "\n\n" + ff
          if(main != "") {
          	out += "dmain(" + main + ")"
          }
          
          return {
          	src: out,
              uses: uses,
              attributes
          }
          //return out
          //return ff
      };
  var peg$f1 = function(chars) {
      	uses.push(chars.join("")) // Ignore use, recognized by preprocessor
      	return ""
      };
  var peg$f2 = function(chars, args) {
      	var a = []
          for(var ar of args) {
          	a.push(ar[1])
          }
      	attributes.push({
          	attr: chars.value,
              args: a
          })
      	return ""
      };
  var peg$f3 = function(chars) {
      	// attribute without args
          attributes.push({
          	attr: chars.value,
              args: []
          })
          return ""
      };
  var peg$f4 = function(def) {
      	return def
      };
  var peg$f5 = function(tname, fields) {
      	// Type Definition
          var type = ""
          
          // create constructor (wrapper)
          type += "value_t " + tname.value + "Wrapper("
          
          var fieldNames = "\tchar **fields = malloc(sizeof(char *) * " + fields.length + ");\n"
          var assignments = "\tvalue_t *values = malloc(sizeof(value_t) * " + fields.length + ");\n"
          var count = 0
          for(var f of fields) {
          	// field names
              fieldNames += "\tfields[" + count + "] = " + '"' + f[3].value + '";\n'
          
          	// initializers
          	if(f[5][0] == "?") {
              	type += "value_t " + f[3].value + ", "
                  assignments += "\tvalues[" + count + "] = " + f[3].value + ";\n"
              } else if(f[5][0] == "=") {
              	//initializers += "\tvalue_t " + f[3].value + " = " + f[5][2] + ";\n"
              	assignments += "\tvalues[" + count + "] = " + f[5][2] + ";\n"
              }
              
              count++
          }
          type = type.slice(0, -2)
          type += ") {\n"
          type += fieldNames + "\n"
          type += assignments + "\n"
          
          type += "\tvalue_t temp = Class(" + '"' + tname.value + '"' +", " + (tname.value.length + 1) + ", " + fields.length + ", fields, values);\n"
          type += "\treturn temp;\n"
          
          type += "}\n"
          
          var con = "value_t " + tname.value + "(value_t *args, unsigned int size) {\n"
          con += "\treturn " + tname.value + "Wrapper("
          
          var c = 0
          for(var f of fields) {
          	if(f[5][0] == "?") {
              	con += "args[" + c + "], "
                  c++
              }
          }
          con = con.slice(0, -2)
          
          con += ");\n"
          con += "}\n"
          
          type += con
          types.push(type)
          
          return ""
      };
  var peg$f6 = function(branch) {
      	var str = ""
      	if(branch[1].value == "main" && branch[3].value == "rarr") {
          	str += "dmain(" + branch[5].slice(8, branch[5].indexOf("(")) + ")"
          } else if(branch[3].value == "rarr") {
          	str += "value_t " + branch[1].value + "(value_t values[], unsigned int size){\n"
          	str += "\treturn " + branch[5].slice(8, branch[5].indexOf("(")) + "(values, size);\n"
          	str += "}"
          }
      
      	return branch[5] + str + "\n\n"
      };
  var peg$f7 = function(branch) {
      	var str = ""
          
          if(branch[3].value != "rarr") { return }
          
          str += "value_t " + branch[1].value + "(value_t values[], unsigned int size){\n"
          str += "\treturn " + branch[5].value + "(values, size);\n"
          str += "}"
          
          return str
      };
  var peg$f8 = function(branch) {
      	var str = "value_t " + branch[1].value + "(value_t values[], unsigned int size) {\n"
          str += "\targs_t args = createArgs(values, size);\n\n"
          var counter = 0
          // go over cases
          for(var cse of branch[3]) {
          	str += "\tvalue_t values" + counter + "[] = {"
              str += cse[2].values
              str += "};\n"
              str += "\targs_t args" + counter + " = createArgs(values" + counter +", " + cse[2].values.length + ");\n"
              counter++
          }
          
          funs.push(branch[1].value)
          /*if(lookForEntry == true) {
          	main = branch[1].value
          }*/
          // go over attributes, add them
          for(var a of attributes) {
          	switch(a.attr) {
              	case "entry":
                  	main = branch[1].value
                      break
                  case "deprecated":
                  	str += '\tprintf("%s", "Warning, function '+ "'" + branch[1].value + "'" +' is deprecated\\n");\n'
                  	break
                 	default:
                  	str += "\tvalue_t a_" + a.attr + " = " + a.attr + "((value_t[]){"
                      for(var attrarg of a.args) {
                      	str += attrarg + ", "
                      }
                      if(a.args.length != 0) {
                          str = str.slice(0, -2)
                      }
                      str += "}, " + a.args.length + ");\n"
                      break
              }
          }
          
          attributes = []
          
          // check cases
          var operationName = "if"
          counter = 0
          for(var cse of branch[3]) {
          	str += "\t" + operationName +"(compareArgs(args, args" + counter + ")) {\n"
  			// go over values, check for variables, initliaze them
              var i = 0
              for(var val of cse[2].raw) {
              	if(!(val.startsWith("String") || val.startsWith("Number") || val.startsWith("Atom") || val.startsWith("List")))
              	{//if(val[0] != "(")
                  	// create and initialize variable
                  	str += "\t\tvalue_t " + val + " = values[" + i + "];\n"
                  }
                  i++
              }
              
              // go over defexprs
              // initialize
              for(var def of cse[2].defs) {
              	// initialize temp value
                  var id = "temp_" + makeid(8)
                  str += "\t\tvalue_t " + id + " = " + def.value + ";\n"
                  // generate specific code
              	switch(def.expr.ident) {
                  	case "listsplit":
                      	var count = 0
                          for(var name of def.expr.names) {
                          	if(count < (def.expr.names.length - 1)) {
                              	// all besides last element
                                  //str += "\t\tvalue_t " + name.value + " = " + id + "[" + count + "];\n"
                              	str += "\t\tvalue_t " + name.value + " = " + "getList(" + id + ").values[" + count + "];\n"
                              } else {
                              	// last element
                                  str += "\t\tvalue_t " + name.value + " = EmptyList(len(" + id + ") - " + count + ");\n"
                              	
                                  var iterId = makeid(4)
                              	str += "\t\tfor(int " + iterId + " = " + count +"; " + iterId + " < len(" + id + "); " + iterId + "++) {\n"
                              	//str += "\t\t\tgetList(" + name.value + ").values[" + iterId + " - " + count +"] = " + id + "[" + iterId + "];\n"
                                  str += "\t\t\tgetList(" + name.value + ").values[" + iterId + " - " + count +"] = getList(" + id + ").values[" + iterId + "];\n"
                                  str += "\t\t}\n"
                              }
                          	count++
                          }
                      	break
                  	case "name":
                      	str += "\t\tvalue_t " + def.expr.value + " = " + id + ";\n"
                      	break
                  }
              }
              
              // return
              str += "\t\treturn "
              str += cse[6]
              str += ";\n"
              
              str += "\t}\n"
              operationName = "else if"
              counter++
          }
          
          str += "}\n\n"
          return str
      };
  var peg$f9 = function(branch) {
      	var args = []
          var raw = []
          for(var elem of branch[2]) {
          	raw.push(elem[1])
          	//if(elem[1][0] != "(")
              var val = elem[1]
              if(!(val.startsWith("String") || val.startsWith("Number") || val.startsWith("Atom") || val.startsWith("List")))
              {
              	//args.push("(value_t){ANY, &(any_t){1}}")
                  args.push("Any()")
                  continue
              }
          	args.push(elem[1])
          }
          
          var defs = []
          for(var d of branch[6]) {
          	defs.push({
              	expr: d[3],
                  value: d[7]
              })
          }
          
          return {ident: "defargs", values: args, raw: raw, defs: defs}
      };
  var peg$f10 = function(vars, inits, ops, result) {
      	
          var wrappedIter = makeid(8)
          var variableNames = []
          for(var v of vars) {
          	if(v[0] != undefined) {
              	wrappedIter = v[1].value // value with prefix "?" is wrapping iter
              } else {
          		variableNames.push(v[1].value)
              }
          }
          
          // search for iterator
          var iterator = "none"
          var iteratorValue = ""
          for(var init of inits) {
          	if(init[4].value == "larr") {
              	iterator = init[2].value
                  iteratorValue = init[6]
              }
          }
          
          // build new function
          // add to sets
          var temp = ""
          var funcName = "set_" + makeid(6)
          //setsNames.push(funcName)
          
          // build declaration
          temp += "value_t " + funcName + "(value_t iteratorList, "
          for(var name of variableNames) {
          	temp += "value_t " + name + ","
          }
          temp = temp.slice(0, -1)
          temp += ") {\n"
          setsNames.push(temp.slice(0, -3))
          
          // initialize
          temp += "\tvalue_t elem = None();\n"
          temp += "\tvalue_t returning = EmptyList(getList(" + "iteratorList" + ").size);\n"
          temp += "\tint curr = 0;\n"
          temp += "\tfor(int iter = 0; iter < getList(" + "iteratorList" + ").size; iter++) {\n"
          temp += "\t\telem = getList(iteratorList).values[iter];\n"
          temp += "\t\tvalue_t " + wrappedIter + " = Number(" + "(float)iter" + ");\n"
          temp += "\t\t" + iterator + " = elem;\n"
          
          temp += "\t\tif("
          for(var o of ops) {
          	temp += " isTrue(" + o[2] + ") &&"
          }
          temp = temp.slice(0, -2)
          temp += ") {\n"
          temp += "\t\t\tgetList(returning).values[curr] = " + result + ";\n"
          temp += "\t\t\tcurr++;\n"
          temp += "\t\t}\n"
          temp += "\t}\n"
          
          temp += "\treturn sliceList(returning, curr);\n"
          
          temp += "}"
          
          sets.push(temp)
          
          // returned
          var retStr = ""
          
          retStr += funcName + "(" + iteratorValue + ", "
          for(var it of inits) {
          	retStr += it[6] + ","
          }
          retStr = retStr.slice(0, -1)
          retStr += ")"
          
          return retStr
      };
  var peg$f11 = function(branch) {return branch[1]};
  var peg$f12 = function(branch) {
      		return 'String("' + branch.value + '",' + branch.value.length + ")"
      		/*return '(value_t){STRING, &(string_t){"'+ 
              	branch.value + '",' + branch.value.length
              +'}}'*/
        	};
  var peg$f13 = function(branch) {
      	var num = branch.value
          if(!(num+"").includes(".")) {
          	num = num + "."
          }
          return "Number(" + num + "f)"
  		//return "(value_t){NUMBER, &(number_t){"+
      	//	num + "f"
          //+"}}"
          };
  var peg$f14 = function(branch) {return branch.value};
  var peg$f15 = function(branch) {
      		/*return '(value_t){ATOM, &(atom_t){"'+ 
              	branch.value + '",' + branch.value.length
              +'}}'*/
              return 'Atom("' + branch.value + '",' + branch.value.length + ")"
        	};
  var peg$f16 = function(branch) {return branch};
  var peg$f17 = function(name, field) {
      	return "op_colon(Atom(" + '"' + field.value + '", ' + (field.value.length + 0) + '), ' + name.value + ")"
      };
  var peg$f18 = function(first, other) {
      	var names = [first]
          
          for(var name of other) {
          	names.push(name[3])
          }
      
      	return {ident: "listsplit", names: names} 
      };
  var peg$f19 = function(ex) {
          return "&" + ex
      };
  var peg$f20 = function(branch) {
          var str = branch[0].value + "("
      	
          for(var elem of branch[2]) {
          	str += elem[0]
              if(elem[2] != null) {
              	str += elem[2]
              }
          }
          
          str += ")"
      	return str
      };
  var peg$f21 = function(branch) {return branch[0]};
  var peg$f22 = function(branch) {
      	var str = branch[0].value + "((value_t[]){"
      	
          for(var elem of branch[2]) {
          	str += elem[0]
              if(elem[2] != null) {
              	str += elem[2]
              }
          }
          
          str += "}," + branch[2].length + ")"
      	return str
      };
  var peg$f23 = function(branch) {
      	return "Index(" + branch[0] + ", (" + branch[3] + "))"
      };
  var peg$f24 = function(branch) {
      	var values = [branch[0]]
          var ops = []
          for(var elem of branch[2]) {
          	values.push(elem[3])
              ops.push(elem[1])
          }
          
          // 5, 8, 9
          // +, -
          // op_plus(op_minus(5, 8), 9)
          // op_any(b, a)!!!!
          
          values = values.reverse()
          ops = ops.reverse()
          
          var str = ""
          function getSource(i) {
         		if(i >= ops.length) {
              	str += "("+values[i]+")"
              	return
              }
          	str += "op_"+ops[i].value+"(("+values[i]+"),"
              getSource(i+1)
          }
          getSource(0)
          for(var i = 0; i < ops.length; i++) { str += ")" }
          
          return str
      };
  var peg$f25 = function(branch, args) {
      	// common factor -> call
      	var values = [branch[0]]
          var ops = []
          for(var elem of branch[2]) {
          	values.push(elem[3])
              ops.push(elem[1])
          }
          
          // 5, 8, 9
          // +, -
          // op_plus(op_minus(5, 8), 9)
          // op_any(b, a)!!!!
          
          // process args
          var str2 = "((value_t[]){"
          var argCounter = args[2].length
          for(var elem of args[2]) {
          	str2 += elem[1]
              if(elem[3] != null) {
              	str2 += args[3]
              }
              str2 += ", "
          }
          str2 = str2.slice(0, -2)
          str2 += "}, " + argCounter + ")"
          
          values = values.reverse()
          ops = ops.reverse()
          
          var str = ""
          function getSource(i) {
         		if(i >= ops.length) {
              	str += "("+values[i]+")" + str2
              	return
              }
          	str += "op_"+ops[i].value+"(("+values[i]+")" + str2 +","
              getSource(i+1)
          }
          getSource(0)
          for(var i = 0; i < ops.length; i++) { str += ")" }
          
          return str
      };
  var peg$f26 = function(branch, args) {
      	// common factor -> index
      	var values = [branch[0]]
          var ops = []
          for(var elem of branch[2]) {
          	values.push(elem[3])
              ops.push(elem[1])
          }
          
          // 5, 8, 9
          // +, -
          // op_plus(op_minus(5, 8), 9)
          // op_any(b, a)!!!!
          
          values = values.reverse()
          ops = ops.reverse()
          
          var str = ""
          function getSource(i) {
         		if(i >= ops.length) {
              	str += "Index(("+values[i]+"),(" + args[2] + "))"
              	return
              }
          	str += "op_"+ops[i].value+"(Index(("+values[i]+"),(" + args[2] +"))" +","
              getSource(i+1)
          }
          getSource(0)
          for(var i = 0; i < ops.length; i++) { str += ")" }
          
          return str
      };
  var peg$f27 = function(text) {return {ident: 'name', value: text.join("")}};
  var peg$f28 = function(chars) { return {ident: 'string', value: chars.join("")} };
  var peg$f29 = function(nm) { return {ident: 'atom', value: nm.value} };
  var peg$f30 = function(branch) {
      	var src = ""
          for(var elem of branch[2]) {
          	src += elem[0]
              if(elem[2] != null) {
              	src += elem[2]
              }
          }
          return "List(" + "((value_t[]){" + src + "})," + branch[2].length + ")"
      };
  var peg$f31 = function() {return {ident: "op", value: "plusplusplus"}};
  var peg$f32 = function() {return {ident: "op", value: "plusplus"}};
  var peg$f33 = function() {return {ident: "op", value: "plus"}};
  var peg$f34 = function() {return {ident: "op", value: "starstarstar"}};
  var peg$f35 = function() {return {ident: "op", value: "starstar"}};
  var peg$f36 = function() {return {ident: "op", value: "star"}};
  var peg$f37 = function() {return {ident: "op", value: "slashslashslash"}};
  var peg$f38 = function() {return {ident: "op", value: "slashslash"}};
  var peg$f39 = function() {return {ident: "op", value: "slash"}};
  var peg$f40 = function() {return {ident: "op", value: "percpercperc"}};
  var peg$f41 = function() {return {ident: "op", value: "percperc"}};
  var peg$f42 = function() {return {ident: "op", value: "perc"}};
  var peg$f43 = function() {return {ident: "op", value: "andandand"}};
  var peg$f44 = function() {return {ident: "op", value: "andand"}};
  var peg$f45 = function() {return {ident: "op", value: "and"}};
  var peg$f46 = function() {return {ident: "op", value: "hashhashhash"}};
  var peg$f47 = function() {return {ident: "op", value: "hashhash"}};
  var peg$f48 = function() {return {ident: "op", value: "hash"}};
  var peg$f49 = function() {return {ident: "op", value: "atatat"}};
  var peg$f50 = function() {return {ident: "op", value: "atat"}};
  var peg$f51 = function() {return {ident: "op", value: "at"}};
  var peg$f52 = function() {return {ident: "op", value: "dollardollardollar"}};
  var peg$f53 = function() {return {ident: "op", value: "dollardollar"}};
  var peg$f54 = function() {return {ident: "op", value: "dollar"}};
  var peg$f55 = function() {return {ident: "op", value: "parparpar"}};
  var peg$f56 = function() {return {ident: "op", value: "parpar"}};
  var peg$f57 = function() {return {ident: "op", value: "par"}};
  var peg$f58 = function() {return {ident: "op", value: "coloncoloncolon"}};
  var peg$f59 = function() {return {ident: "op", value: "coloncolon"}};
  var peg$f60 = function() {return {ident: "op", value: "colon"}};
  var peg$f61 = function() {return {ident: "op", value: "scolonscolonscolon"}};
  var peg$f62 = function() {return {ident: "op", value: "scolonscolon"}};
  var peg$f63 = function() {return {ident: "op", value: "scolon"}};
  var peg$f64 = function() {return {ident: "op", value: "upupup"}};
  var peg$f65 = function() {return {ident: "op", value: "upup"}};
  var peg$f66 = function() {return {ident: "op", value: "up"}};
  var peg$f67 = function() {return {ident: "op", value: "degdegdeg"}};
  var peg$f68 = function() {return {ident: "op", value: "degdeg"}};
  var peg$f69 = function() {return {ident: "op", value: "deg"}};
  var peg$f70 = function() {return {ident: "op", value: "questquestquest"}};
  var peg$f71 = function() {return {ident: "op", value: "questquest"}};
  var peg$f72 = function() {return {ident: "op", value: "quest"}};
  var peg$f73 = function() {return {ident: "op", value: "leq"}};
  var peg$f74 = function() {return {ident: "op", value: "geq"}};
  var peg$f75 = function() {return {ident: "op", value: "larr"}};
  var peg$f76 = function() {return {ident: "op", value: "rarr"}};
  var peg$f77 = function() {return {ident: "op", value: "Larr"}};
  var peg$f78 = function() {return {ident: "op", value: "Rarr"}};
  var peg$f79 = function() {return {ident: "op", value: "less"}};
  var peg$f80 = function() {return {ident: "op", value: "greater"}};
  var peg$f81 = function() {return {ident: "op", value: "minusminusminus"}};
  var peg$f82 = function() {return {ident: "op", value: "minusminus"}};
  var peg$f83 = function() {return {ident: "op", value: "minus"}};
  var peg$f84 = function() {return {ident: "op", value: "ororor"}};
  var peg$f85 = function() {return {ident: "op", value: "oror"}};
  var peg$f86 = function() {return {ident: "op", value: "or"}};
  var peg$f87 = function() {return {ident: "op", value: "exclexclexcl"}};
  var peg$f88 = function() {return {ident: "op", value: "exclexcl"}};
  var peg$f89 = function() {return {ident: "op", value: "excl"}};
  var peg$f90 = function() {return {ident: "op", value: "eqeqeq"}};
  var peg$f91 = function() {return {ident: "op", value: "eqeq"}};
  var peg$f92 = function() {return {ident: "op", value: "eq"}};
  var peg$f93 = function() {return {ident: "op", value: "neq"}};
  var peg$f94 = function() {return {ident: "op", value: "req"}};
  var peg$f95 = function() {return {ident: "op", value: "tildetildetilde"}};
  var peg$f96 = function() {return {ident: "op", value: "tildetilde"}};
  var peg$f97 = function() {return {ident: "op", value: "tilde"}};
  var peg$f98 = function() {return {ident: "op", value: "pm"}};
  var peg$f99 = function() {return {ident: "op", value: "dotdotdot"}};
  var peg$f100 = function() {return {ident: "op", value: "dotdot"}};
  var peg$f101 = function() {return {ident: "op", value: "dot"}};
  var peg$f102 = function() {return {ident: "op", value: "markmarkmark"}};
  var peg$f103 = function() {return {ident: "op", value: "markmark"}};
  var peg$f104 = function() {return {ident: "op", value: "mark"}};
  var peg$f105 = function() { return "\b"; };
  var peg$f106 = function() { return "\f"; };
  var peg$f107 = function() { return "\n"; };
  var peg$f108 = function() { return "\r"; };
  var peg$f109 = function() { return "\t"; };
  var peg$f110 = function(sequence) { return sequence; };
  var peg$f111 = function(left, right) { return {ident: 'number', value: parseFloat(left.join("") + "." +   right.join(""))}};
  var peg$f112 = function(left) {return {ident: 'number', value: parseFloat(left.join(""))}};
  var peg$f113 = function(left, right) { return {ident: 'number', value: -parseFloat(left.join("") + "." +   right.join(""))}};
  var peg$f114 = function(left) {return {ident: 'number', value: -parseFloat(left.join(""))}};
  var peg$f115 = function(Comment) {return {ident: 'comment', value: Comment.join("")}};

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parsecomment();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parse_();
    s6 = peg$parsetop();
    if (s6 !== peg$FAILED) {
      s7 = peg$parse_();
      s8 = peg$parsecomment();
      if (s8 === peg$FAILED) {
        s8 = null;
      }
      s9 = peg$parse_();
      s3 = [s3, s4, s5, s6, s7, s8, s9];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsecomment();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parsetop();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parsecomment();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        s3 = [s3, s4, s5, s6, s7, s8, s9];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsetop() {
    var s0;

    s0 = peg$parsedefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetypedef();
      if (s0 === peg$FAILED) {
        s0 = peg$parseextension();
        if (s0 === peg$FAILED) {
          s0 = peg$parseattributes();
        }
      }
    }

    return s0;
  }

  function peg$parseattributes() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f1(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parse_();
            s9 = peg$parseexpr();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parse_();
              s9 = peg$parseexpr();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s8 = peg$c3;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f2(s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseName();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f3(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c4) {
            s1 = peg$c4;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedefinition();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f4(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetypedef() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s3 = peg$c6;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 124) {
            s10 = peg$c7;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseName();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 63) {
                s14 = peg$c8;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s14 === peg$FAILED) {
                s14 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                  s15 = peg$c9;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseexpr();
                  if (s17 !== peg$FAILED) {
                    s15 = [s15, s16, s17];
                    s14 = s15;
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s14;
                  s14 = peg$FAILED;
                }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                s9 = [s9, s10, s11, s12, s13, s14, s15];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 124) {
                s10 = peg$c7;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$parseName();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 63) {
                    s14 = peg$c8;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s14 === peg$FAILED) {
                    s14 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s15 = peg$c9;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e9); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = peg$parseexpr();
                      if (s17 !== peg$FAILED) {
                        s15 = [s15, s16, s17];
                        s14 = s15;
                      } else {
                        peg$currPos = s14;
                        s14 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    s9 = [s9, s10, s11, s12, s13, s14, s15];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f5(s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseextension() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    s3 = peg$parseName();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseop();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsedefinition();
        if (s7 !== peg$FAILED) {
          s2 = [s2, s3, s4, s5, s6, s7];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parse_();
      s3 = peg$parseName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseop();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseName();
          if (s7 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5, s6, s7];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f7(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    s3 = peg$parseName();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = [];
      s6 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s7 = peg$c7;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$parsedefinitionArgs();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s11 = peg$c9;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseoperation();
            if (s13 === peg$FAILED) {
              s13 = peg$parseexpr();
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 124) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsedefinitionArgs();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s11 = peg$c9;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseoperation();
                if (s13 === peg$FAILED) {
                  s13 = peg$parseexpr();
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s2 = [s2, s3, s4, s5];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedefinitionArgs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseexpr();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s9 = peg$c10;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s6 = [s6, s7, s8, s9];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseexpr();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c10;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s6 = [s6, s7, s8, s9];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s6 = peg$c3;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = [];
        s9 = peg$currPos;
        s10 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s11 = peg$c10;
          peg$currPos++;
        } else {
          s11 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s11 !== peg$FAILED) {
          s12 = peg$parse_();
          s13 = peg$parsedefexpr();
          if (s13 !== peg$FAILED) {
            s14 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
              s15 = peg$c11;
              peg$currPos++;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s15 !== peg$FAILED) {
              s16 = peg$parse_();
              s17 = peg$parseexpr();
              if (s17 !== peg$FAILED) {
                s10 = [s10, s11, s12, s13, s14, s15, s16, s17];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$currPos;
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s11 = peg$c10;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parsedefexpr();
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s15 = peg$c11;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                s17 = peg$parseexpr();
                if (s17 !== peg$FAILED) {
                  s10 = [s10, s11, s12, s13, s14, s15, s16, s17];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        }
        s2 = [s2, s3, s4, s5, s6, s7, s8];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesetexpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s5 = peg$c8;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parseName();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseName();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 124) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s9 = peg$c2;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseName();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseop();
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s15 = peg$parseexpr();
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s17 = peg$c3;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s17 !== peg$FAILED) {
                    s18 = peg$parse_();
                    s9 = [s9, s10, s11, s12, s13, s14, s15, s16, s17, s18];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseName();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  s13 = peg$parseop();
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    s15 = peg$parseexpr();
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s17 = peg$c3;
                        peg$currPos++;
                      } else {
                        s17 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e3); }
                      }
                      if (s17 !== peg$FAILED) {
                        s18 = peg$parse_();
                        s9 = [s9, s10, s11, s12, s13, s14, s15, s16, s17, s18];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 124) {
              s9 = peg$c7;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s13 = peg$c2;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s15 = peg$parseoperation();
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s17 = peg$c3;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                  }
                  if (s17 !== peg$FAILED) {
                    s18 = peg$parse_();
                    s13 = [s13, s14, s15, s16, s17, s18];
                    s12 = s13;
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              if (s12 !== peg$FAILED) {
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s13 = peg$c2;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    s15 = peg$parseoperation();
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s17 = peg$c3;
                        peg$currPos++;
                      } else {
                        s17 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e3); }
                      }
                      if (s17 !== peg$FAILED) {
                        s18 = peg$parse_();
                        s13 = [s13, s14, s15, s16, s17, s18];
                        s12 = s13;
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                }
              } else {
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 124) {
                  s13 = peg$c7;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseexpr();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s17 = peg$c13;
                      peg$currPos++;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e13); }
                    }
                    if (s17 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f10(s3, s7, s11, s15);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefexpr() {
    var s0;

    s0 = peg$parseName();
    if (s0 === peg$FAILED) {
      s0 = peg$parselistsplit();
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsecall();
    if (s0 === peg$FAILED) {
      s0 = peg$parseindex();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefield();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c2;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseoperation();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f11(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parsecommonFac();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesetexpr();
              if (s0 === peg$FAILED) {
                s0 = peg$parseunsafe();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsestring();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f12(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseNumber();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f13(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseName();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f14(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseatom();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f15(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parselist();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f16(s1);
                          }
                          s0 = s1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefield() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseatom();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistsplit() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 124) {
          s8 = peg$c7;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseName();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 124) {
              s8 = peg$c7;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseName();
              if (s10 !== peg$FAILED) {
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s7 = peg$c15;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f18(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunsafe() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseexpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c3;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseoperation();
            if (s7 === peg$FAILED) {
              s7 = peg$parseexpr();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c10;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$parse_();
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseoperation();
              if (s7 === peg$FAILED) {
                s7 = peg$parseexpr();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c10;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = peg$parse_();
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c3;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexprdown() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsecall();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperation();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c3;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f14(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsecall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseName();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseoperation();
        if (s6 === peg$FAILED) {
          s6 = peg$parseexpr();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          s6 = [s6, s7, s8, s9];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseoperation();
          if (s6 === peg$FAILED) {
            s6 = peg$parseexpr();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c10;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parse_();
            s6 = [s6, s7, s8, s9];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s2 = [s2, s3, s4, s5];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseindex() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseexprdown();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpr();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s7 = peg$c15;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5, s6, s7];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoperation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseexpr();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseop();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$parseexpr();
        if (s9 !== peg$FAILED) {
          s6 = [s6, s7, s8, s9];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseop();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseexpr();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecommonFac() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseexpr();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parse_();
        s9 = peg$parseop();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = peg$parseexpr();
          if (s11 !== peg$FAILED) {
            s8 = [s8, s9, s10, s11];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parse_();
            s9 = peg$parseop();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseexpr();
              if (s11 !== peg$FAILED) {
                s8 = [s8, s9, s10, s11];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = [];
            s10 = peg$currPos;
            s11 = peg$parse_();
            s12 = peg$parseexpr();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s14 = peg$c10;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
              if (s14 === peg$FAILED) {
                s14 = null;
              }
              s11 = [s11, s12, s13, s14];
              s10 = s11;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$parseexpr();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c10;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                s11 = [s11, s12, s13, s14];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c3;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s11 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10, s11];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c12;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        s4 = peg$parseexpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parse_();
          s9 = peg$parseop();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseexpr();
            if (s11 !== peg$FAILED) {
              s8 = [s8, s9, s10, s11];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parse_();
              s9 = peg$parseop();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseexpr();
                if (s11 !== peg$FAILED) {
                  s8 = [s8, s9, s10, s11];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s7 = peg$c14;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseexpr();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 93) {
                  s11 = peg$c15;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f26(s3, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s2 === peg$FAILED) {
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 === peg$FAILED) {
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s2 === peg$FAILED) {
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s2 === peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s2 === peg$FAILED) {
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            if (s2 === peg$FAILED) {
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e21); }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c18;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f28(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseatom() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseexpr();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c10;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        s6 = [s6, s7, s8, s9];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseexpr();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          s6 = [s6, s7, s8, s9];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c15;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s6 !== peg$FAILED) {
        s2 = [s2, s3, s4, s5, s6];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseop() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f32();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
          s1 = peg$c21;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f33();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f34();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s1 = peg$c23;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e28); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f35();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c24;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e29); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f36();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c25) {
                  s1 = peg$c25;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e30); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f37();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c26) {
                    s1 = peg$c26;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e31); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f38();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s1 = peg$c27;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e32); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f39();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c28) {
                        s1 = peg$c28;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e33); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f40();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c29) {
                          s1 = peg$c29;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e34); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f41();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 37) {
                            s1 = peg$c30;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e35); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f42();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c31) {
                              s1 = peg$c31;
                              peg$currPos += 3;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e36); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f43();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c32) {
                                s1 = peg$c32;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e37); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f44();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 38) {
                                  s1 = peg$c33;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e38); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f45();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 3) === peg$c34) {
                                    s1 = peg$c34;
                                    peg$currPos += 3;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f46();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c35) {
                                      s1 = peg$c35;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e40); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f47();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 35) {
                                        s1 = peg$c36;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e41); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f48();
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 3) === peg$c37) {
                                          s1 = peg$c37;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f49();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c38) {
                                            s1 = peg$c38;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e43); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f50();
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 64) {
                                              s1 = peg$c1;
                                              peg$currPos++;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$f51();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 3) === peg$c39) {
                                                s1 = peg$c39;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$f52();
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 2) === peg$c40) {
                                                  s1 = peg$c40;
                                                  peg$currPos += 2;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e45); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$f53();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.charCodeAt(peg$currPos) === 36) {
                                                    s1 = peg$c41;
                                                    peg$currPos++;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e46); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$f54();
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 3) === peg$c42) {
                                                      s1 = peg$c42;
                                                      peg$currPos += 3;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$f55();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.substr(peg$currPos, 2) === peg$c43) {
                                                        s1 = peg$c43;
                                                        peg$currPos += 2;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e48); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$f56();
                                                      }
                                                      s0 = s1;
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.charCodeAt(peg$currPos) === 167) {
                                                          s1 = peg$c44;
                                                          peg$currPos++;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$f57();
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          if (input.substr(peg$currPos, 3) === peg$c45) {
                                                            s1 = peg$c45;
                                                            peg$currPos += 3;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$f58();
                                                          }
                                                          s0 = s1;
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 2) === peg$c6) {
                                                              s1 = peg$c6;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e6); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$f59();
                                                            }
                                                            s0 = s1;
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              if (input.charCodeAt(peg$currPos) === 58) {
                                                                s1 = peg$c11;
                                                                peg$currPos++;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e11); }
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$f60();
                                                              }
                                                              s0 = s1;
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                if (input.substr(peg$currPos, 3) === peg$c46) {
                                                                  s1 = peg$c46;
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                                                                }
                                                                if (s1 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s1 = peg$f61();
                                                                }
                                                                s0 = s1;
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  if (input.substr(peg$currPos, 2) === peg$c47) {
                                                                    s1 = peg$c47;
                                                                    peg$currPos += 2;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                                                                  }
                                                                  if (s1 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$f62();
                                                                  }
                                                                  s0 = s1;
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    if (input.charCodeAt(peg$currPos) === 59) {
                                                                      s1 = peg$c48;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e53); }
                                                                    }
                                                                    if (s1 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$f63();
                                                                    }
                                                                    s0 = s1;
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      if (input.substr(peg$currPos, 3) === peg$c49) {
                                                                        s1 = peg$c49;
                                                                        peg$currPos += 3;
                                                                      } else {
                                                                        s1 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e54); }
                                                                      }
                                                                      if (s1 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$f64();
                                                                      }
                                                                      s0 = s1;
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        if (input.substr(peg$currPos, 2) === peg$c50) {
                                                                          s1 = peg$c50;
                                                                          peg$currPos += 2;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e55); }
                                                                        }
                                                                        if (s1 !== peg$FAILED) {
                                                                          peg$savedPos = s0;
                                                                          s1 = peg$f65();
                                                                        }
                                                                        s0 = s1;
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          if (input.charCodeAt(peg$currPos) === 94) {
                                                                            s1 = peg$c51;
                                                                            peg$currPos++;
                                                                          } else {
                                                                            s1 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e56); }
                                                                          }
                                                                          if (s1 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$f66();
                                                                          }
                                                                          s0 = s1;
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            if (input.substr(peg$currPos, 3) === peg$c52) {
                                                                              s1 = peg$c52;
                                                                              peg$currPos += 3;
                                                                            } else {
                                                                              s1 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e57); }
                                                                            }
                                                                            if (s1 !== peg$FAILED) {
                                                                              peg$savedPos = s0;
                                                                              s1 = peg$f67();
                                                                            }
                                                                            s0 = s1;
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              if (input.substr(peg$currPos, 2) === peg$c53) {
                                                                                s1 = peg$c53;
                                                                                peg$currPos += 2;
                                                                              } else {
                                                                                s1 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e58); }
                                                                              }
                                                                              if (s1 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$f68();
                                                                              }
                                                                              s0 = s1;
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                if (input.charCodeAt(peg$currPos) === 176) {
                                                                                  s1 = peg$c54;
                                                                                  peg$currPos++;
                                                                                } else {
                                                                                  s1 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                                                                                }
                                                                                if (s1 !== peg$FAILED) {
                                                                                  peg$savedPos = s0;
                                                                                  s1 = peg$f69();
                                                                                }
                                                                                s0 = s1;
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  if (input.substr(peg$currPos, 3) === peg$c55) {
                                                                                    s1 = peg$c55;
                                                                                    peg$currPos += 3;
                                                                                  } else {
                                                                                    s1 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e60); }
                                                                                  }
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    peg$savedPos = s0;
                                                                                    s1 = peg$f70();
                                                                                  }
                                                                                  s0 = s1;
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    if (input.substr(peg$currPos, 2) === peg$c56) {
                                                                                      s1 = peg$c56;
                                                                                      peg$currPos += 2;
                                                                                    } else {
                                                                                      s1 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e61); }
                                                                                    }
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      peg$savedPos = s0;
                                                                                      s1 = peg$f71();
                                                                                    }
                                                                                    s0 = s1;
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      if (input.charCodeAt(peg$currPos) === 63) {
                                                                                        s1 = peg$c8;
                                                                                        peg$currPos++;
                                                                                      } else {
                                                                                        s1 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                                                                      }
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        peg$savedPos = s0;
                                                                                        s1 = peg$f72();
                                                                                      }
                                                                                      s0 = s1;
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        if (input.substr(peg$currPos, 2) === peg$c57) {
                                                                                          s1 = peg$c57;
                                                                                          peg$currPos += 2;
                                                                                        } else {
                                                                                          s1 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e62); }
                                                                                        }
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          peg$savedPos = s0;
                                                                                          s1 = peg$f73();
                                                                                        }
                                                                                        s0 = s1;
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          if (input.substr(peg$currPos, 2) === peg$c58) {
                                                                                            s1 = peg$c58;
                                                                                            peg$currPos += 2;
                                                                                          } else {
                                                                                            s1 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e63); }
                                                                                          }
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            peg$savedPos = s0;
                                                                                            s1 = peg$f74();
                                                                                          }
                                                                                          s0 = s1;
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            if (input.substr(peg$currPos, 2) === peg$c59) {
                                                                                              s1 = peg$c59;
                                                                                              peg$currPos += 2;
                                                                                            } else {
                                                                                              s1 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e64); }
                                                                                            }
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              peg$savedPos = s0;
                                                                                              s1 = peg$f75();
                                                                                            }
                                                                                            s0 = s1;
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              if (input.substr(peg$currPos, 2) === peg$c60) {
                                                                                                s1 = peg$c60;
                                                                                                peg$currPos += 2;
                                                                                              } else {
                                                                                                s1 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e65); }
                                                                                              }
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                peg$savedPos = s0;
                                                                                                s1 = peg$f76();
                                                                                              }
                                                                                              s0 = s1;
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                if (input.substr(peg$currPos, 2) === peg$c61) {
                                                                                                  s1 = peg$c61;
                                                                                                  peg$currPos += 2;
                                                                                                } else {
                                                                                                  s1 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                                                                                                }
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  peg$savedPos = s0;
                                                                                                  s1 = peg$f77();
                                                                                                }
                                                                                                s0 = s1;
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  if (input.substr(peg$currPos, 2) === peg$c62) {
                                                                                                    s1 = peg$c62;
                                                                                                    peg$currPos += 2;
                                                                                                  } else {
                                                                                                    s1 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                                                                                  }
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    peg$savedPos = s0;
                                                                                                    s1 = peg$f78();
                                                                                                  }
                                                                                                  s0 = s1;
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    if (input.charCodeAt(peg$currPos) === 60) {
                                                                                                      s1 = peg$c63;
                                                                                                      peg$currPos++;
                                                                                                    } else {
                                                                                                      s1 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                                                                                    }
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      peg$savedPos = s0;
                                                                                                      s1 = peg$f79();
                                                                                                    }
                                                                                                    s0 = s1;
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      if (input.charCodeAt(peg$currPos) === 62) {
                                                                                                        s1 = peg$c64;
                                                                                                        peg$currPos++;
                                                                                                      } else {
                                                                                                        s1 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e69); }
                                                                                                      }
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        peg$savedPos = s0;
                                                                                                        s1 = peg$f80();
                                                                                                      }
                                                                                                      s0 = s1;
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        if (input.substr(peg$currPos, 3) === peg$c65) {
                                                                                                          s1 = peg$c65;
                                                                                                          peg$currPos += 3;
                                                                                                        } else {
                                                                                                          s1 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e70); }
                                                                                                        }
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          peg$savedPos = s0;
                                                                                                          s1 = peg$f81();
                                                                                                        }
                                                                                                        s0 = s1;
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          if (input.substr(peg$currPos, 2) === peg$c66) {
                                                                                                            s1 = peg$c66;
                                                                                                            peg$currPos += 2;
                                                                                                          } else {
                                                                                                            s1 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e71); }
                                                                                                          }
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            peg$savedPos = s0;
                                                                                                            s1 = peg$f82();
                                                                                                          }
                                                                                                          s0 = s1;
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                              s1 = peg$c67;
                                                                                                              peg$currPos++;
                                                                                                            } else {
                                                                                                              s1 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                                                                                            }
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              peg$savedPos = s0;
                                                                                                              s1 = peg$f83();
                                                                                                            }
                                                                                                            s0 = s1;
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              if (input.substr(peg$currPos, 3) === peg$c68) {
                                                                                                                s1 = peg$c68;
                                                                                                                peg$currPos += 3;
                                                                                                              } else {
                                                                                                                s1 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                                                                                              }
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                peg$savedPos = s0;
                                                                                                                s1 = peg$f84();
                                                                                                              }
                                                                                                              s0 = s1;
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$currPos;
                                                                                                                if (input.substr(peg$currPos, 2) === peg$c69) {
                                                                                                                  s1 = peg$c69;
                                                                                                                  peg$currPos += 2;
                                                                                                                } else {
                                                                                                                  s1 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                                                                                                }
                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                  peg$savedPos = s0;
                                                                                                                  s1 = peg$f85();
                                                                                                                }
                                                                                                                s0 = s1;
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$currPos;
                                                                                                                  if (input.charCodeAt(peg$currPos) === 124) {
                                                                                                                    s1 = peg$c7;
                                                                                                                    peg$currPos++;
                                                                                                                  } else {
                                                                                                                    s1 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                                                                                                                  }
                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                    peg$savedPos = s0;
                                                                                                                    s1 = peg$f86();
                                                                                                                  }
                                                                                                                  s0 = s1;
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$currPos;
                                                                                                                    if (input.substr(peg$currPos, 3) === peg$c70) {
                                                                                                                      s1 = peg$c70;
                                                                                                                      peg$currPos += 3;
                                                                                                                    } else {
                                                                                                                      s1 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e75); }
                                                                                                                    }
                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                      peg$savedPos = s0;
                                                                                                                      s1 = peg$f87();
                                                                                                                    }
                                                                                                                    s0 = s1;
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$currPos;
                                                                                                                      if (input.substr(peg$currPos, 2) === peg$c17) {
                                                                                                                        s1 = peg$c17;
                                                                                                                        peg$currPos += 2;
                                                                                                                      } else {
                                                                                                                        s1 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                                                                                                      }
                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                        peg$savedPos = s0;
                                                                                                                        s1 = peg$f88();
                                                                                                                      }
                                                                                                                      s0 = s1;
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$currPos;
                                                                                                                        if (input.charCodeAt(peg$currPos) === 33) {
                                                                                                                          s1 = peg$c71;
                                                                                                                          peg$currPos++;
                                                                                                                        } else {
                                                                                                                          s1 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                                                                                                        }
                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                          peg$savedPos = s0;
                                                                                                                          s1 = peg$f89();
                                                                                                                        }
                                                                                                                        s0 = s1;
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$currPos;
                                                                                                                          if (input.substr(peg$currPos, 3) === peg$c72) {
                                                                                                                            s1 = peg$c72;
                                                                                                                            peg$currPos += 3;
                                                                                                                          } else {
                                                                                                                            s1 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                                                                                                          }
                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                            peg$savedPos = s0;
                                                                                                                            s1 = peg$f90();
                                                                                                                          }
                                                                                                                          s0 = s1;
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$currPos;
                                                                                                                            if (input.substr(peg$currPos, 2) === peg$c73) {
                                                                                                                              s1 = peg$c73;
                                                                                                                              peg$currPos += 2;
                                                                                                                            } else {
                                                                                                                              s1 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e78); }
                                                                                                                            }
                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                              peg$savedPos = s0;
                                                                                                                              s1 = peg$f91();
                                                                                                                            }
                                                                                                                            s0 = s1;
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$currPos;
                                                                                                                              if (input.charCodeAt(peg$currPos) === 61) {
                                                                                                                                s1 = peg$c9;
                                                                                                                                peg$currPos++;
                                                                                                                              } else {
                                                                                                                                s1 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                                                                                                              }
                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                peg$savedPos = s0;
                                                                                                                                s1 = peg$f92();
                                                                                                                              }
                                                                                                                              s0 = s1;
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$currPos;
                                                                                                                                if (input.substr(peg$currPos, 2) === peg$c74) {
                                                                                                                                  s1 = peg$c74;
                                                                                                                                  peg$currPos += 2;
                                                                                                                                } else {
                                                                                                                                  s1 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e79); }
                                                                                                                                }
                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                  peg$savedPos = s0;
                                                                                                                                  s1 = peg$f93();
                                                                                                                                }
                                                                                                                                s0 = s1;
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$currPos;
                                                                                                                                  if (input.charCodeAt(peg$currPos) === 8776) {
                                                                                                                                    s1 = peg$c75;
                                                                                                                                    peg$currPos++;
                                                                                                                                  } else {
                                                                                                                                    s1 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e80); }
                                                                                                                                  }
                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                    peg$savedPos = s0;
                                                                                                                                    s1 = peg$f94();
                                                                                                                                  }
                                                                                                                                  s0 = s1;
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$currPos;
                                                                                                                                    if (input.substr(peg$currPos, 3) === peg$c76) {
                                                                                                                                      s1 = peg$c76;
                                                                                                                                      peg$currPos += 3;
                                                                                                                                    } else {
                                                                                                                                      s1 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e81); }
                                                                                                                                    }
                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                      peg$savedPos = s0;
                                                                                                                                      s1 = peg$f95();
                                                                                                                                    }
                                                                                                                                    s0 = s1;
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$currPos;
                                                                                                                                      if (input.substr(peg$currPos, 2) === peg$c77) {
                                                                                                                                        s1 = peg$c77;
                                                                                                                                        peg$currPos += 2;
                                                                                                                                      } else {
                                                                                                                                        s1 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e82); }
                                                                                                                                      }
                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                        peg$savedPos = s0;
                                                                                                                                        s1 = peg$f96();
                                                                                                                                      }
                                                                                                                                      s0 = s1;
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$currPos;
                                                                                                                                        if (input.charCodeAt(peg$currPos) === 126) {
                                                                                                                                          s1 = peg$c78;
                                                                                                                                          peg$currPos++;
                                                                                                                                        } else {
                                                                                                                                          s1 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e83); }
                                                                                                                                        }
                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                          peg$savedPos = s0;
                                                                                                                                          s1 = peg$f97();
                                                                                                                                        }
                                                                                                                                        s0 = s1;
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$currPos;
                                                                                                                                          if (input.charCodeAt(peg$currPos) === 177) {
                                                                                                                                            s1 = peg$c79;
                                                                                                                                            peg$currPos++;
                                                                                                                                          } else {
                                                                                                                                            s1 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e84); }
                                                                                                                                          }
                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                            peg$savedPos = s0;
                                                                                                                                            s1 = peg$f98();
                                                                                                                                          }
                                                                                                                                          s0 = s1;
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$currPos;
                                                                                                                                            if (input.substr(peg$currPos, 3) === peg$c80) {
                                                                                                                                              s1 = peg$c80;
                                                                                                                                              peg$currPos += 3;
                                                                                                                                            } else {
                                                                                                                                              s1 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e85); }
                                                                                                                                            }
                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                              peg$savedPos = s0;
                                                                                                                                              s1 = peg$f99();
                                                                                                                                            }
                                                                                                                                            s0 = s1;
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$currPos;
                                                                                                                                              if (input.substr(peg$currPos, 2) === peg$c81) {
                                                                                                                                                s1 = peg$c81;
                                                                                                                                                peg$currPos += 2;
                                                                                                                                              } else {
                                                                                                                                                s1 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                                                                                                                              }
                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                s1 = peg$f100();
                                                                                                                                              }
                                                                                                                                              s0 = s1;
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                if (input.charCodeAt(peg$currPos) === 46) {
                                                                                                                                                  s1 = peg$c82;
                                                                                                                                                  peg$currPos++;
                                                                                                                                                } else {
                                                                                                                                                  s1 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e87); }
                                                                                                                                                }
                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                  s1 = peg$f101();
                                                                                                                                                }
                                                                                                                                                s0 = s1;
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                  if (input.substr(peg$currPos, 3) === peg$c83) {
                                                                                                                                                    s1 = peg$c83;
                                                                                                                                                    peg$currPos += 3;
                                                                                                                                                  } else {
                                                                                                                                                    s1 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                                                                                                                                  }
                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                    s1 = peg$f102();
                                                                                                                                                  }
                                                                                                                                                  s0 = s1;
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                    if (input.substr(peg$currPos, 2) === peg$c84) {
                                                                                                                                                      s1 = peg$c84;
                                                                                                                                                      peg$currPos += 2;
                                                                                                                                                    } else {
                                                                                                                                                      s1 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                                                                                                                                    }
                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                      s1 = peg$f103();
                                                                                                                                                    }
                                                                                                                                                    s0 = s1;
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 39) {
                                                                                                                                                        s1 = peg$c85;
                                                                                                                                                        peg$currPos++;
                                                                                                                                                      } else {
                                                                                                                                                        s1 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                                                                                                                                      }
                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                        s1 = peg$f104();
                                                                                                                                                      }
                                                                                                                                                      s0 = s1;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3;

    s0 = peg$parseunescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c85;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c86;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c27;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c87;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e92); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f105();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c88;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e93); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$f106();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c89;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e94); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$f107();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c90;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e95); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$f108();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c91;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e96); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$f109();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f110(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseescape() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c86;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parsequotation_mark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c18;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseunescaped() {
    var s0;

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c82;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f111(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f112(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c67;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r2.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e20); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c82;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e87); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$r2.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e20); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$r2.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e20); }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f113(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c67;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e72); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r2.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e20); }
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f114(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c92) {
      s2 = peg$c92;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c93) {
        s6 = peg$c93;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c93) {
          s6 = peg$c93;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e100); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e101); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c93) {
        s4 = peg$c93;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f115(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r5.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e102); }

    return s0;
  }


  	// Global Initializer
      var sets = []
      var setsNames = []
      var types = [] // holds type data
      var funs = []
      var uses = []
      
      var main = ""
      var lookForEntry = false
      
      var attributes = []
      
      function makeid(length) {
     		var result           = '';
        	var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        	var charactersLength = characters.length;
        	for ( var i = 0; i < length; i++ ) {
        		result += characters.charAt(Math.floor(Math.random() * charactersLength));
        	}
     		return result;
  	}


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
